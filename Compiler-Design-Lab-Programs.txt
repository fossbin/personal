Compiler Design Lab Programs (MODEL)
1. Implement a C program to test whether a given identifier is valid or not
#include <stdio.h>
#include <ctype.h>

int isValidIdentifier(char *str) {
    // Check if the first character is a letter or underscore
    if (!(isalpha(str[0]) || str[0] == '_'))
        return 0;

    // Check the rest of the characters
    for (int i = 1; str[i] != '\0'; i++) {
        if (!(isalnum(str[i]) || str[i] == '_'))
            return 0;
    }

    return 1;
}

int main() {
    char identifier[100];

    // Input the identifier
    printf("Enter an identifier: ");
    scanf("%s", identifier);

    // Validate the identifier
    if (isValidIdentifier(identifier))
        printf("Valid identifier\n");
    else
        printf("Invalid identifier\n");

    return 0;
}

2. Implement a C program to test whether a given string is keyword or not
#include <stdio.h>
#include <string.h>
int main() {
   char keyword[32][10]={
      "auto","double","int","struct","break","else","long",
      "switch","case","enum","register","typedef","char",
      "extern","return","union","const","float","short",
      "unsigned","continue","for","signed","void","default",
      "goto","sizeof","voltile","do","if","static","while"
   } ;
   char str[10];
   printf("Enter a string value :");
   scanf("%s",str);
   int flag=0,i;
   for(i = 0; i < 32; i++) {
      if(strcmp(str,keyword[i])==0) {
         flag=1;
      }
   }
   if(flag==1)
      printf("%s is a keyword",str);
   else
      printf("%s is not a keyword",str);
}

3. Implement a C program to test whether a given string is comment or not
#include<stdio.h>
#include<ctype.h>

void main() {
    char var[100];
    int flag = 0;

    // Input the string
    printf("Enter a string to check: ");
    scanf("%s", var);

    // Check if it's a single-line comment
    if (var[0] == '/' && var[1] == '/') {
        flag = 1;
    }
    // Check if it's a block comment
    else if (var[0] == '/' && var[1] == '*') {
        int i = 2;
        while (var[i] != '\0') {
            if (var[i] == '*' && var[i + 1] == '/') {
                flag = 2;
                break;
            }
            i++;
        }
    }

    // Output results
    if (flag == 1) {
        printf("It is a single-line comment\n");
    } else if (flag == 2) {
        printf("It is a block comment\n");
    } else {
        printf("Not a comment\n");
    }
}

4. Program to simulate lexical analyzer for validating operators
%{
#include <stdio.h>
%}

%%

"+"      { printf("Valid Operator: Addition (+)\n"); }
"-"      { printf("Valid Operator: Subtraction (-)\n"); }
"*"      { printf("Valid Operator: Multiplication (*)\n"); }
"/"      { printf("Valid Operator: Division (/)\n"); }
"%"      { printf("Valid Operator: Modulus (%%)\n"); }
"="      { printf("Valid Operator: Assignment (=)\n"); }
"=="     { printf("Valid Operator: Equal to (==)\n"); }
"!="     { printf("Valid Operator: Not equal to (!=)\n"); }
"&&"     { printf("Valid Operator: Logical AND (&&)\n"); }
"||"     { printf("Valid Operator: Logical OR (||)\n"); }
"<"      { printf("Valid Operator: Less than (<)\n"); }
">"      { printf("Valid Operator: Greater than (>)\n"); }
"<="     { printf("Valid Operator: Less than or equal to (<=)\n"); }
">="     { printf("Valid Operator: Greater than or equal to (>=)\n"); }

.        { printf("Invalid Operator: %s\n", yytext); }  // Catch-all for invalid operators

%%

int main() {
    yylex();  // Start lexical analysis
    return 0;
}

int yywrap() {
    return 1;
}

To run the lex program type the following commands in order
lex filename.l
cc lex.yy.c
./a.out 

5. Program to identify tokens from an expression using LEX tool
%{
#include <stdio.h>
%}

%%

[a-zA-Z_][a-zA-Z0-9_]*   { printf("Identifier: %s\n", yytext); }
[0-9]+\.[0-9]+           { printf("Float: %s\n", yytext); }
[0-9]+                   { printf("Integer: %s\n", yytext); }
"+"                      { printf("Operator: Addition (+)\n"); }
"-"                      { printf("Operator: Subtraction (-)\n"); }
"*"                      { printf("Operator: Multiplication (*)\n"); }
"/"                      { printf("Operator: Division (/)\n"); }
"="                      { printf("Operator: Assignment (=)\n"); }
"("                      { printf("Left Parenthesis: (\n"); }
")"                      { printf("Right Parenthesis: )\n"); }
[ \t\n]                  { /* Ignore whitespace */ }

.                        { printf("Unknown token: %s\n", yytext); }

%%

int main() {
    printf("Enter an expression:\n");
    yylex();  // Start lexical analysis
    return 0;
}

int yywrap() {
    return 1;
}
6. Implement a C program to recognize strings under the Grammar

A , A*B+ , ABB

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int grammar_1(char *str);
int grammar_2(char *str);
int grammar_3(char *str);
void recognize_string(char *str);

// A
int grammar_1(char *str)
{
    return (strlen(str) == 1 && str[0] == 'A');
}

// A*B+
int grammar_2(char *str)
{
    int i = 0;

    // A*
    while (str[i] == 'A')
    {
        i++;
    }
    // atleast 1 B
    if (str[i] == 'B')
        while (str[i] == 'B')
            i++;
    else
        return 0;
    // cgeck end
    return (str[i] == '\0');
}

// ABB
int grammar_3(char *str)
{
    return (strlen(str) == 3 && str[0] == 'A' && str[1] == 'B' && str[2] == 'B');
}

void recognize_string(char *str)
{
    if (grammar_1(str))
    {
        printf("The string '%s' matches the rule: A\n", str);
    }
    else if (grammar_2(str))
    {
        printf("The string '%s' matches the rule: A*B+\n", str);
    }
    else if (grammar_3(str))
    {
        printf("The string '%s' matches the rule: ABB\n", str);
    }
    else
    {
        printf("The string '%s' does not match any rule.\n", str);
    }
}

int main()
{
    char *test_strings[] = {"A", "AAABBB", "ABB", "AB", "AAABB", "BB", "AAA", ""};

    for (int i = 0; i < sizeof(test_strings) / sizeof(test_strings[0]); i++)
    {
        recognize_string(test_strings[i]);
    }

    return 0;
}
